/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package openchannel_dynamic_downloader.utils;

import java.net.MalformedURLException;
import java.net.URL;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import openchannel_dynamic_downloader.downloader.DownloadTask;
import openchannel_dynamic_downloader.downloader.DownloadUnit;
import openchannel_dynamic_downloader.h2.H2DatabaseConnector;
import openchannel_dynamic_downloader.model.MainDataModel;

/**
 *
 * @author tomas
 */
public class DbUtil {

    public static final void getUsersTableInfo() {
        new H2DatabaseConnector(Info.Db.DB_MAIN_USERNAME, Info.Db.DB_MAIN_PASSWORD) {

            @Override
            public void execute() {
                try (PreparedStatement stmt = getConnection().prepareStatement("select * from users")) {
                    try (ResultSet rs = stmt.executeQuery()) {
                        while (rs.next()) {
                            String name = rs.getString(1);
                            String password = rs.getString(2);
                            String email = rs.getString(3);
                            System.out.println(name + "; " + password + "; " + email);
                        }
                    }
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
                closeConnection();
            }

        }.execute();
    }

    /**
     *
     * @param du
     * @return returns id of downlaod unit generated by db, returns null if error occured
     */
    public static final long insertDownload(DownloadUnit du) {
        Long id = new H2DatabaseConnector(MainDataModel.getInstance().loginProfile) {

            @Override
            @SuppressWarnings("UnnecessaryBoxing")//Necessary
            public <T> T executeRetrieve() {
                try {

                    /*
                     getStatement().execute("CREATE TABLE downloads(id BIGINT PRIMARY KEY AUTO_INCREMENT NOT NULL,"
                     + "state INT NOT NULL,name VARCHAR(255) NOT NULL,size LONG NOT NULL,downloaded LONG NOT NULL,"
                     + "source VARCHAR(255) NOT NULL,added VARCHAR(255) NOT NULL,completedOn VARCHAR(255),downloadDir VARCHAR(255) NOT NULL)");
                     */
                    System.out.println("Gonna store :" + du + "\n");
                    prepStat = getConnection().prepareStatement("INSERT INTO downloads(state,connections,name,size,source,added,completedOn,downloadDir) VALUES(?,?,?,?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
                    prepStat.setInt(1, du.getState());
                    prepStat.setInt(2, du.getNumberOfConnections());
                    prepStat.setString(3, du.getName());
                    prepStat.setLong(4, du.getSize());
                    prepStat.setString(5, du.getSource());
                    prepStat.setString(6, du.getAdded());
                    prepStat.setString(7, du.getCompletedOn());
                    prepStat.setString(8, du.getDirectory());
                    prepStat.executeUpdate();
                    resultSet = prepStat.getGeneratedKeys();
                    //return id
                    if (resultSet.next()) {
                        return (T) Long.valueOf(resultSet.getLong(1));
                    }

                } catch (SQLException ex) {
                    ex.printStackTrace();

                }
                return null;

            }

        }.executeRetrieve();
        System.out.println("ENTERED INTO DATABASE");
        return (id != null) ? id : -1;
    }

    //OVERLOADED
    public static final void printQueryResultSet(String username, String password, String query) {
        new H2DatabaseConnector(username, password) {

            @Override
            public void execute() {
                try {
                    resultSet = statement.executeQuery(query);
                    resultSetMd = resultSet.getMetaData();

                    for (int i = 0; i < resultSetMd.getColumnCount(); i++) {
                        System.out.print("\t" + resultSetMd.getColumnName(i + 1));

                    }
                    System.out.println("\n-----------------------------------");

                    System.out.println("");
                    int c = resultSetMd.getColumnCount();

                    while (resultSet.next() && c != 0) {
                        for (int i = 1; i < resultSetMd.getColumnCount() + 1; i++) {
                            System.out.print("\t" + resultSet.getString(i));
                        }
                        System.out.println("");

                    }
                    System.out.println("");
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }

                closeConnection();
            }

        }
                .execute();

    }


    public static final void createUsersTable() {//top db
        new H2DatabaseConnector(Info.Db.DB_MAIN_USERNAME, Info.Db.DB_MAIN_PASSWORD) {

            @Override
            public void execute() {
                try {
                    //TODO use prepared Statements!
                    if (getStatement().execute("CREATE TABLE users(name VARCHAR(255) NOT NULL,password VARCHAR(255) NOT NULL,email VARCHAR(255))")) {
                        System.out.println("Table created");
                    } else {
                        System.out.println("Table is not created");
                    }
                    getConnection().commit();
                    /* //stack overflow madProgrammer /help
                     getConnection().commit();
                     System.out.println("Table Created users");

                     try (PreparedStatement stmt = getConnection().prepareStatement("INSERT INTO users (name, password, email) VALUES (?,?,?)")) {
                     stmt.setString(1, "sa");
                     stmt.setString(2, "sa");
                     stmt.setString(3, null);
                     int rows = stmt.executeUpdate();
                     System.out.println(rows + " where inserted");
                     getConnection().commit();
                     }

                     try (PreparedStatement stmt = getConnection().prepareStatement("select * from users")) {
                     try (ResultSet rs = stmt.executeQuery()) {
                     while (rs.next()) {
                     String name = rs.getString(1);
                     String password = rs.getString(2);
                     String email = rs.getString(3);
                     System.out.println(name + "; " + password + "; " + email);
                     }
                     }
                     }
                     */
                    getStatement().executeUpdate("INSERT INTO users VALUES ('sa','sa',NULL)");
                    getConnection().commit();
                    closeConnection();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }

        }.execute();
    }

    public static final void createTablesForUser() {
        new H2DatabaseConnector(MainDataModel.getInstance().loginProfile) {

            @Override
            public void execute() {
                try {
                    //DOWNLOADED WILL BE ONLY UPDATED ON CHANGE OF STATE/APPLICATION EXIT.  / cant update every few bytes or EVERY BYTE.. unacceptable./alebo ak s anaplni buffer.. nevim
                    getStatement().execute("CREATE TABLE downloads(id bigint auto_increment,"
                            + "state INT NOT NULL,connections INT NOT NULL,name VARCHAR(255) NOT NULL,size LONG NOT NULL,"
                            + "source VARCHAR(1000) NOT NULL,added VARCHAR(255) NOT NULL,completedOn VARCHAR(255),downloadDir VARCHAR(255) NOT NULL);"
                            + "CREATE TABLE statistics(date DATE auto_increment,downloadedAmount LONG);"
                    
                    );
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }

        }.execute();
    }

    //WILL HAVE TO USE PREPARED STATEMENTS
    public static final boolean updateDownloadUnit() {
        return false;
    }

    public static final void changeUserPassword(String password) {
        new H2DatabaseConnector(Info.Db.DB_MAIN_USERNAME, Info.Db.DB_MAIN_PASSWORD) {

            @Override
            public void execute() {
                try (PreparedStatement stmt = getConnection().prepareStatement("UPDATE users SET password=? WHERE name=?;")) {
                    stmt.setString(1, password);
                    stmt.setString(2, MainDataModel.getInstance().loginProfile.getUsername());
                    stmt.executeUpdate();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

        }.execute();
    }

    public static final void removeDownload(DownloadUnit dt) {
        new H2DatabaseConnector(MainDataModel.getInstance().loginProfile) {

            @Override
            public void execute() {
                super.execute(); //To change body of generated methods, choose Tools | Templates.
                try (PreparedStatement stmt = getConnection().prepareStatement("DELETE * FROM downloads WHERE id=?")) {
                    stmt.setString(1, String.valueOf(dt.getId()));
                } catch (Exception e) {
                    e.printStackTrace();
                }

            }

        }.execute();
    }

    public static final void removeDownloads(List<DownloadUnit> list) {
        new H2DatabaseConnector(MainDataModel.getInstance().loginProfile) {

            StringBuilder sb = new StringBuilder();

            @Override
            public void execute() {
                super.execute(); //To change body of generated methods, choose Tools | Templates.
                sb.append("DELETE FROM downloads WHERE id IN (");
                for (int i = 0; i < list.size(); i++) {
                    if (list.size() != i + 1) {
                        sb.append("?,");
                    } else {
                        sb.append("?)");
                    }
                }
                System.out.println("debug prepstat list size " + list.size() + ":" + sb);
                try (PreparedStatement stmt = getConnection().prepareStatement(sb.toString())) {
                    for (int i = 0; i < list.size(); i++) {
                        stmt.setString(i + 1, String.valueOf(list.get(i).getId()));
                        System.out.println("ID:" + list.get(i).getId());
                    }
                    stmt.executeUpdate();
                } catch (Exception e) {
                    e.printStackTrace();
                }

            }

        }.execute();
    }

    public static final void removeDownload(Long id) {
        new H2DatabaseConnector(MainDataModel.getInstance().loginProfile) {

            @Override
            public void execute() {
                super.execute(); //To change body of generated methods, choose Tools | Templates.
                try (PreparedStatement stmt = getConnection().prepareStatement("DELETE * FROM downloads WHERE id=?")) {
                    stmt.setString(1, String.valueOf(id));
                } catch (Exception e) {
                    e.printStackTrace();
                }

            }

        }.execute();
    }

    public static final int DB_INDEX_UNIT_ID = 1;
    public static final int DB_INDEX_UNIT_STATE = 2;
    public static final int DB_INDEX_UNIT_CONNECTIONS = 3;
    public static final int DB_INDEX_UNIT_NAME = 4;
    public static final int DB_INDEX_UNIT_SIZE = 5;
    public static final int DB_INDEX_UNIT_SOURCE = 6;
    public static final int DB_INDEX_UNIT_ADDED = 7;
    public static final int DB_INDEX_UNIT_COMPLETEDON = 8;
    public static final int DB_INDEX_UNIT_DOWNDIR = 9;
    /*
     getStatement().execute("CREATE TABLE downloads(id bigint auto_increment,"
     + "state INT NOT NULL,connections INT NOT NULL,name VARCHAR(255) NOT NULL,size LONG NOT NULL,"
     + "source VARCHAR(1000) NOT NULL,added VARCHAR(255) NOT NULL,completedOn VARCHAR(255),downloadDir VARCHAR(255) NOT NULL);"
     + "CREATE TABLE offsets()");
     */

    public static final ArrayList<DownloadUnit> loadDownloads() {

        return new H2DatabaseConnector(MainDataModel.getInstance().loginProfile) {

            ArrayList<DownloadUnit> ret = new ArrayList<>();

            @Override
            public <T extends Iterable> T executeRetrieveIterable() {
                try (PreparedStatement stmt = getConnection().prepareStatement("select * from downloads")) {
                    try (ResultSet rs = stmt.executeQuery()) {
                        while (rs.next()) {
                            DownloadUnit du = new DownloadUnit(rs.getLong(1), rs.getInt(DB_INDEX_UNIT_STATE), rs.getInt(DB_INDEX_UNIT_CONNECTIONS),
                                    rs.getString(DB_INDEX_UNIT_NAME), rs.getLong(DB_INDEX_UNIT_SIZE), rs.getString(DB_INDEX_UNIT_SOURCE), rs.getString(DB_INDEX_UNIT_ADDED), rs.getString(DB_INDEX_UNIT_COMPLETEDON), rs.getString(DB_INDEX_UNIT_DOWNDIR));
                            ret.add(du);
                            System.out.println(du);

                        }
                    }
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
                closeConnection();
                return (T) ret;
            }

        }.executeRetrieveIterable();
    }
    //overload load downloads

    public static void updateDownload(DownloadUnit du) {
        new H2DatabaseConnector(MainDataModel.getInstance().loginProfile) {

            @Override
            public void execute() {
                try {

                    /*
                     getStatement().execute("CREATE TABLE downloads(id bigint auto_increment,"
                     + "state INT NOT NULL,connections INT NOT NULL,name VARCHAR(255) NOT NULL,size LONG NOT NULL,"
                     + "source VARCHAR(1000) NOT NULL,added VARCHAR(255) NOT NULL,completedOn VARCHAR(255),downloadDir VARCHAR(255) NOT NULL);"
                     + "CREATE TABLE offsets()");
                     */
                    System.out.println("Gonna update :" + du + "\n");
                    prepStat = getConnection().prepareStatement("UPDATE downloads SET state=?,connections=?,name=?,size=?,source=?,added=?,completedOn=?,downloadDir=?"
                            + "WHERE id=?;");
                    prepStat.setInt(1, du.getState());
                    prepStat.setInt(2, du.getNumberOfConnections());
                    prepStat.setString(3, du.getName());
                    prepStat.setLong(4, du.getSize());
                    prepStat.setString(5, du.getSource());
                    prepStat.setString(6, du.getAdded());
                    prepStat.setString(7, du.getCompletedOn());
                    prepStat.setString(8, du.getDirectory());
                    prepStat.setLong(9, du.getId());
                    prepStat.executeUpdate();
                    resultSet = prepStat.getGeneratedKeys();

                } catch (SQLException ex) {
                    ex.printStackTrace();

                }

            }

        }.execute();
        System.out.println("UPDATED ENTRY IN DATABASE");

    }

}
